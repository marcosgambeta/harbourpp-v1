// WINAPI for Harbour++ - Bindings libraries for Harbour++ and WINAPI
// Copyright (c) 2024 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

// MIT License
//
// Copyright (c) 2024 Marcos Antonio Gambeta
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//#define wa_get_ptr(n)          hb_itemGetPtr(hb_objSendMsg(hb_param(n, Harbour::Item::OBJECT), "PTR", 0))
#define wa_get_ptr(n)          HB_ISOBJECT(n) ? hb_objDataGetPtr(hb_param(n, Harbour::Item::OBJECT), "PTR") : nullptr
// #define wa_par_STRUCT(s, n)    static_cast<s>(hb_itemGetPtr(hb_objSendMsg(hb_param(n, Harbour::Item::OBJECT), "PTR", 0))

#define wa_par_ATOM(n)         static_cast<ATOM>(hb_parni(n))
#define wa_par_BOOL(n)         hb_parl(n)
#define wa_par_BOOLEAN(n)      hb_parl(n)
#define wa_par_BYTE(n)         static_cast<BYTE>(hb_parni(n))
#define wa_par_char(n)         static_cast<char>(hb_parni(n))
#define wa_par_CHAR(n)         static_cast<CHAR>(hb_parni(n))
#define wa_par_COLORREF(n)     static_cast<COLORREF>(hb_parnl(n))
#define wa_par_COLOR16(n)      static_cast<COLOR16>(hb_parni(n))
#define wa_par_DWORD(n)        static_cast<DWORD>(hb_parnl(n))
#define wa_par_DWORD_PTR(n)    static_cast<DWORD_PTR>(hb_parnl(n))
#define wa_par_FLOAT(n)        static_cast<FLOAT>(hb_parnd(n))
#define wa_par_HACCEL(n)       static_cast<HACCEL>(hb_parptr(n))
#define wa_par_HANDLE(n)       static_cast<HANDLE>(hb_parptr(n))
#define wa_par_HBITMAP(n)      static_cast<HBITMAP>(hb_parptr(n))
#define wa_par_HBRUSH(n)       static_cast<HBRUSH>(hb_parptr(n))
#define wa_par_HCOLORSPACE(n)  static_cast<HCOLORSPACE>(hb_parptr(n))
#define wa_par_HCURSOR(n)      static_cast<HCURSOR>(hb_parptr(n))
#define wa_par_HDC(n)          static_cast<HDC>(hb_parptr(n))
#define wa_par_HDESK(n)        static_cast<HDESK>(hb_parptr(n))
#define wa_par_HDEVNOTIFY(n)   static_cast<HDEVNOTIFY>(hb_parptr(n))
#define wa_par_HDRVR(n)        static_cast<HDRVR>(hb_parptr(n))
#define wa_par_HDWP(n)         static_cast<HDWP>(hb_parptr(n))
#define wa_par_HENHMETAFILE(n) static_cast<HENHMETAFILE>(hb_parptr(n))
#define wa_par_HFILE(n)        static_cast<HFILE>(hb_parni(n))
#define wa_par_HFONT(n)        static_cast<HFONT>(hb_parptr(n))
#define wa_par_HGDIOBJ(n)      static_cast<HGDIOBJ>(hb_parptr(n))
#define wa_par_HGLOBAL(n)      static_cast<HGLOBAL>(hb_parptr(n))
#define wa_par_HGLRC(n)        static_cast<HGLRC>(hb_parptr(n))
#define wa_par_HICON(n)        static_cast<HICON>(hb_parptr(n))
#define wa_par_HIMAGELIST(n)   static_cast<HIMAGELIST>(hb_parptr(n))
#define wa_par_HINSTANCE(n)    static_cast<HINSTANCE>(hb_parptr(n))
#define wa_par_HINTERNET(n)    static_cast<HINTERNET>(hb_parptr(n))
#define wa_par_HKEY(n)         static_cast<HKEY>(hb_parptr(n))
#define wa_par_HKL(n)          static_cast<HKL>(hb_parptr(n))
#define wa_par_HLOCAL(n)       static_cast<HLOCAL>(hb_parptr(n))
#define wa_par_HMENU(n)        static_cast<HMENU>(hb_parptr(n))
#define wa_par_HMETAFILE(n)    static_cast<HMETAFILE>(hb_parptr(n))
#define wa_par_HMIDI(n)        static_cast<HMIDI>(hb_parptr(n))
#define wa_par_HMIDIIN(n)      static_cast<HMIDIIN>(hb_parptr(n))
#define wa_par_HMIDIOUT(n)     static_cast<HMIDIOUT>(hb_parptr(n))
#define wa_par_HMIDISTRM(n)    static_cast<HMIDISTRM>(hb_parptr(n))
#define wa_par_HMIXER(n)       static_cast<HMIXER>(hb_parptr(n))
#define wa_par_HMMIO(n)        static_cast<HMMIO>(hb_parptr(n))
#define wa_par_HMODULE(n)      static_cast<HMODULE>(hb_parptr(n))
#define wa_par_HPALETTE(n)     static_cast<HPALETTE>(hb_parptr(n))
#define wa_par_HPOWERNOTIFY(n) static_cast<HPOWERNOTIFY>(hb_parptr(n))
#define wa_par_HRGN(n)         static_cast<HRGN>(hb_parptr(n))
#define wa_par_HRSRC(n)        static_cast<HRSRC>(hb_parptr(n))
#define wa_par_HTASK(n)        static_cast<HTASK>(hb_parptr(n))
#define wa_par_HWAVEIN(n)      static_cast<HWAVEIN>(hb_parptr(n))
#define wa_par_HWAVEOUT(n)     static_cast<HWAVEOUT>(hb_parptr(n))
#define wa_par_HWINSTA(n)      static_cast<HWINSTA>(hb_parptr(n))
#define wa_par_HWND(n)         static_cast<HWND>(hb_parptr(n))
#define wa_par_int(n)          hb_parni(n)
#define wa_par_INT(n)          hb_parni(n)
#define wa_par_INT_PTR(n)      static_cast<INT_PTR>(hb_parni(n))
#define wa_par_LONG(n)         static_cast<LONG>(hb_parnl(n))
#define wa_par_LONG_PTR(n)     static_cast<LONG_PTR>(hb_parnl(n))
#define wa_par_LPARAM(n)       static_cast<LPARAM>(hb_parnint(n))
#define wa_par_LPCSTR(n)       hb_parc(n)
#define wa_par_LPCWSTR(n)      reinterpret_cast<LPCWSTR>(hb_parc(n))
#define wa_par_PCWSTR(n)       reinterpret_cast<PCWSTR>(hb_parc(n))
#define wa_par_LPVOID(n)       static_cast<LPVOID>(hb_parptr(n))
#define wa_par_LRESULT(n)      static_cast<LRESULT>(hb_parnl(n))
#define wa_par_MCIDEVICEID(n)  static_cast<MCIDEVICEID>(hb_parni(n))
#define wa_par_MCIERROR(n)     static_cast<MCIERROR>(hb_parnl(n))
#define wa_par_MMRESULT(n)     static_cast<MMRESULT>(hb_parni(n))
#define wa_par_REAL(n)         static_cast<REAL>(hb_parnd(n))
#define wa_par_SIZE_T(n)       static_cast<SIZE_T>(hb_parnl(n))
#define wa_par_UCHAR(n)        static_cast<UCHAR>(hb_parni(n))
#define wa_par_UINT(n)         static_cast<UINT>(hb_parni(n))
#define wa_par_UINT_PTR(n)     HB_ISNUM(n) ? static_cast<UINT_PTR>(hb_parni(n)) : reinterpret_cast<UINT_PTR>(hb_parptr(n))
#define wa_par_UINT32(n)       static_cast<UINT32>(hb_parni(n))
#define wa_par_ULONG(n)        static_cast<ULONG>(hb_parnl(n))
#define wa_par_ULONG_PTR(n)    static_cast<ULONG_PTR>(hb_parnl(n))
#define wa_par_WCHAR(n)        static_cast<WCHAR>(hb_parni(n))
#define wa_par_WORD(n)         static_cast<WORD>(hb_parni(n))
#define wa_par_WPARAM(n)       static_cast<WPARAM>(hb_parni(n))
#define wa_par_SHORT(n)        static_cast<SHORT>(hb_parni(n))
#define wa_par_DWORDLONG(n)    static_cast<DWORDLONG>(hb_parnll(n))
#define wa_par_ULONGLONG(n)    static_cast<ULONGLONG>(hb_parnll(n))
#define wa_par_LANGID(n)       static_cast<LANGID>(hb_parni(n))
#define wa_par_WNDPROC(n)      reinterpret_cast<WNDPROC>(hb_parptr(n))
#define wa_par_DLGPROC(n)      reinterpret_cast<DLGPROC>(hb_parptr(n))
#define wa_par_TIMERPROC(n)    reinterpret_cast<TIMERPROC>(hb_parptr(n))
#define wa_par_HMONITOR(n)     static_cast<HMONITOR>(hb_parptr(n))
#define wa_par_LCID(n)         static_cast<LCID>(hb_parnl(n))
#define wa_par_GEOID(n)        static_cast<GEOID>(hb_parnl(n))
#define wa_par_GEOTYPE(n)      static_cast<GEOTYPE>(hb_parnl(n))
#define wa_par_GEOCLASS(n)     static_cast<GEOCLASS>(hb_parnl(n))
#define wa_par_LCTYPE(n)       static_cast<LCTYPE>(hb_parnl(n))
#define wa_par_CALTYPE(n)      static_cast<CALTYPE>(hb_parnl(n))
#define wa_par_CALID(n)        static_cast<CALID>(hb_parnl(n))
#define wa_par_WNDENUMPROC(n)     reinterpret_cast<WNDENUMPROC>(hb_parptr(n))
#define wa_par_DESKTOPENUMPROC(n) reinterpret_cast<DESKTOPENUMPROC>(hb_parptr(n))
#define wa_par_WINSTAENUMPROC(n)  reinterpret_cast<WINSTAENUMPROC>(hb_parptr(n))
#define wa_par_SENDASYNCPROC(n)   reinterpret_cast<SENDASYNCPROC>(hb_parptr(n))
#define wa_par_LPCDLGTEMPLATE(n)  static_cast<LPCDLGTEMPLATE>(hb_parptr(n))
#define wa_par_FONTENUMPROC(n) reinterpret_cast<FONTENUMPROC>(hb_parptr(n))
#define wa_par_GOBJENUMPROC(n) reinterpret_cast<GOBJENUMPROC>(hb_parptr(n))
#define wa_par_LINEDDAPROC(n) reinterpret_cast<LINEDDAPROC>(hb_parptr(n))
#define wa_par_MFENUMPROC(n) reinterpret_cast<MFENUMPROC>(hb_parptr(n))
#define wa_par_ENHMFENUMPROC(n) reinterpret_cast<ENHMFENUMPROC>(hb_parptr(n))
#define wa_par_WINEVENTPROC(n) reinterpret_cast<WINEVENTPROC>(hb_parptr(n))
#define wa_par_HWINEVENTHOOK(n) static_cast<HWINEVENTHOOK>(hb_parptr(n))

#define wa_ret___LONG32(x)     hb_retnl(x)
#define wa_ret_ATOM(x)         hb_retni(x)
#define wa_ret_BOOL(x)         hb_retl(x)
#define wa_ret_BOOLEAN(x)      hb_retl(x)
#define wa_ret_BYTE(x)         hb_retni(x)
#define wa_ret_char(x)         hb_retni(x)
#define wa_ret_COLORREF(x)     hb_retnl(x)
#define wa_ret_COLOR16(x)      hb_retni(x)
#define wa_ret_DWORD(x)        hb_retnl(x)
#define wa_ret_DWORD_PTR(x)    hb_retnl(x)
#define wa_ret_DWORDLONG(x)    hb_retnll(x)
#define wa_ret_float(x)        hb_retnd(x)
#define wa_ret_FLOAT(x)        hb_retnd(x)
#define wa_ret_HACCEL(x)       hb_retptr(x)
#define wa_ret_HANDLE(x)       hb_retptr(x)
#define wa_ret_HBITMAP(x)      hb_retptr(x)
#define wa_ret_HBRUSH(x)       hb_retptr(x)
#define wa_ret_HCOLORSPACE(x)  hb_retptr(x)
#define wa_ret_HCURSOR(x)      hb_retptr(x)
#define wa_ret_HDC(x)          hb_retptr(x)
#define wa_ret_HDESK(x)        hb_retptr(x)
#define wa_ret_HDEVNOTIFY(x)   hb_retptr(x)
#define wa_ret_HDRVR(x)        hb_retptr(x)
#define wa_ret_HDWP(x)         hb_retptr(x)
#define wa_ret_HENHMETAFILE(x) hb_retptr(x)
#define wa_ret_HFILE(x)        hb_retni(x)
#define wa_ret_HFONT(x)        hb_retptr(x)
#define wa_ret_HGDIOBJ(x)      hb_retptr(x)
#define wa_ret_HGLOBAL(x)      hb_retptr(x)
#define wa_ret_HGLRC(x)        hb_retptr(x)
#define wa_ret_HICON(x)        hb_retptr(x)
#define wa_ret_HIMAGELIST(x)   hb_retptr(x)
#define wa_ret_HINSTANCE(x)    hb_retptr(x)
#define wa_ret_HINTERNET(x)    hb_retptr(x)
#define wa_ret_HKL(x)          hb_retptr(x)
#define wa_ret_HLOCAL(x)       hb_retptr(x)
#define wa_ret_HMENU(x)        hb_retptr(x)
#define wa_ret_HMETAFILE(x)    hb_retptr(x)
#define wa_ret_HMIDI(x)        hb_retptr(x)
#define wa_ret_HMIDIIN(x)      hb_retptr(x)
#define wa_ret_HMIDIOUT(x)     hb_retptr(x)
#define wa_ret_HMIDISTRM(x)    hb_retptr(x)
#define wa_ret_HMIXER(x)       hb_retptr(x)
#define wa_ret_HMMIO(x)        hb_retptr(x)
#define wa_ret_HMODULE(x)      hb_retptr(x)
#define wa_ret_HMONITOR(x)     hb_retptr(x)
#define wa_ret_HPALETTE(x)     hb_retptr(x)
#define wa_ret_HPEN(x)         hb_retptr(x)
#define wa_ret_HPOWERNOTIFY(x) hb_retptr(x)
#define wa_ret_HRESULT(x)      hb_retnl(x)
#define wa_ret_HRGN(x)         hb_retptr(x)
#define wa_ret_HRSRC(x)        hb_retptr(x)
#define wa_ret_HTASK(x)        hb_retptr(x)
#define wa_ret_HWAVEIN(x)      hb_retptr(x)
#define wa_ret_HWAVEOUT(x)     hb_retptr(x)
#define wa_ret_HWINSTA(x)      hb_retptr(x)
#define wa_ret_HWND(x)         hb_retptr(x)
#define wa_ret_int(x)          hb_retni(x)
#define wa_ret_INT(x)          hb_retni(x)
#define wa_ret_INT_PTR(x)      hb_retni(x)
#define wa_ret_LONG(x)         hb_retnl(x)
#define wa_ret_LONG_PTR(x)     hb_retnl(x)
#define wa_ret_LPARAM(x)       hb_retnint(x)
#define wa_ret_LPVOID(x)       hb_retptr(x)
#define wa_ret_LRESULT(x)      hb_retnl(x)
#define wa_ret_MCIDEVICEID(x)  hb_retni(x)
#define wa_ret_MCIERROR(x)     hb_retnl(x)
#define wa_ret_MMRESULT(x)     hb_retni(x)
#define wa_ret_NTSTATUS(x)     hb_retnl(x)
#define wa_ret_PROC(x)         hb_retptr((void*) x)
#define wa_ret_REAL(x)         hb_retnd(x)
#define wa_ret_SHORT(x)        hb_retni(x)
#define wa_ret_SIZE_T(x)       hb_retnl(x)
#define wa_ret_UINT(x)         hb_retni(x)
#define wa_ret_UINT_PTR(x)     hb_retni(x)
#define wa_ret_ULONG(x)        hb_retnl(x)
#define wa_ret_ULONG_PTR(x)    hb_retnl(x)
#define wa_ret_ULONGLONG(x)    hb_retnll(x)
#define wa_ret_WORD(x)         hb_retni(x)
#define wa_ret_WPARAM(x)       hb_retnl(x)
#define wa_ret_WNDPROC(x)      hb_retptr(reinterpret_cast<void*>(x))
#define wa_ret_DLGPROC(x)      hb_retptr(reinterpret_cast<void*>(x))
#define wa_ret_FARPROC(x)      hb_retptr(reinterpret_cast<void*>(x))
#define wa_ret_LANGID(x)       hb_parni(x)
#define wa_ret_LCID(x)         hb_parnl(x)
#define wa_ret_GEOID(x)        hb_parnl(x)
#define wa_ret_GEOTYPE(x)      hb_parnl(x)
#define wa_ret_GEOCLASS(x)     hb_parnl(x)
#define wa_ret_HWINEVENTHOOK(x) hb_retptr(x)

// #define wa_stor_ATOM(v, n)         hb_storni(v, n)
#define wa_stor_BOOL(v, n)         hb_storl(v, n)
// #define wa_stor_BOOLEAN(v, n)      hb_storl(v, n)
#define wa_stor_BYTE(v, n)         hb_storni(v, n)
// #define wa_stor_CHAR(v, n)         hb_storni(v, n)
#define wa_stor_COLORREF(v, n)     hb_stornl(v, n)
#define wa_stor_DWORD(v, n)        hb_stornl(v, n)
// #define wa_stor_DWORD_PTR(v, n)    hb_stornl(v, n)
#define wa_stor_FLOAT(v, n)        hb_stornd(v, n)
// #define wa_stor_HACCEL(v, n)       hb_storptr(v, n)
// #define wa_stor_HANDLE(v, n)       hb_storptr(v, n)
// #define wa_stor_HBITMAP(v, n)      hb_storptr(v, n)
// #define wa_stor_HBRUSH(v, n)       hb_storptr(v, n)
// #define wa_stor_HCOLORSPACE(v, n)  hb_storptr(v, n)
// #define wa_stor_HCURSOR(v, n)      hb_storptr(v, n)
// #define wa_stor_HDC(v, n)          hb_storptr(v, n)
// #define wa_stor_HDESK(v, n)        hb_storptr(v, n)
// #define wa_stor_HDEVNOTIFY(v, n)   hb_storptr(v, n)
// #define wa_stor_HDRVR(v, n)        hb_storptr(v, n)
// #define wa_stor_HDWP(v, n)         hb_storptr(v, n)
// #define wa_stor_HENHMETAFILE(v, n) hb_storptr(v, n)
// #define wa_stor_HFILE(v, n)        hb_storni(v, n)
// #define wa_stor_HFONT(v, n)        hb_storptr(v, n)
// #define wa_stor_HGDIOBJ(v, n)      hb_storptr(v, n)
// #define wa_stor_HGLOBAL(v, n)      hb_storptr(v, n)
// #define wa_stor_HGLRC(v, n)        hb_storptr(v, n)
// #define wa_stor_HICON(v, n)        hb_storptr(v, n)
// #define wa_stor_HIMAGELIST(v, n)   hb_storptr(v, n)
// #define wa_stor_HINSTANCE(v, n)    hb_storptr(v, n)
// #define wa_stor_HINTERNET(v, n)    hb_storptr(v, n)
// #define wa_stor_HKEY(v, n)         hb_storptr(v, n)
// #define wa_stor_HKL(v, n)          hb_storptr(v, n)
// #define wa_stor_HLOCAL(v, n)       hb_storptr(v, n)
// #define wa_stor_HMENU(v, n)        hb_storptr(v, n)
// #define wa_stor_HMETAFILE(v, n)    hb_storptr(v, n)
// #define wa_stor_HMIDI(v, n)        hb_storptr(v, n)
// #define wa_stor_HMIDIIN(v, n)      hb_storptr(v, n)
// #define wa_stor_HMIDIOUT(v, n)     hb_storptr(v, n)
// #define wa_stor_HMIDISTRM(v, n)    hb_storptr(v, n)
// #define wa_stor_HMIXER(v, n)       hb_storptr(v, n)
// #define wa_stor_HMMIO(v, n)        hb_storptr(v, n)
// #define wa_stor_HMODULE(v, n)      hb_storptr(v, n)
// #define wa_stor_HPALETTE(v, n)     hb_storptr(v, n)
// #define wa_stor_HPOWERNOTIFY(v, n) hb_storptr(v, n)
// #define wa_stor_HRGN(v, n)         hb_storptr(v, n)
// #define wa_stor_HRSRC(v, n)        hb_storptr(v, n)
// #define wa_stor_HTASK(v, n)        hb_storptr(v, n)
// #define wa_stor_HWAVEIN(v, n)      hb_storptr(v, n)
// #define wa_stor_HWAVEOUT(v, n)     hb_storptr(v, n)
// #define wa_stor_HWINSTA(v, n)      hb_storptr(v, n)
// #define wa_stor_HWND(v, n)         hb_storptr(v, n)
#define wa_stor_int(v, n)          hb_storni(v, n)
#define wa_stor_INT(v, n)          hb_storni(v, n)
// #define wa_stor_INT_PTR(v, n)      hb_storni(v, n)
// #define wa_stor_LONG(v, n)         hb_stornl(v, n)
// #define wa_stor_LPARAM(v, n)       hb_stornl(v, n)
// #define wa_stor_LPCSTR(v, n)       hb_storc(v, n)
#define wa_stor_LPVOID(v, n)       hb_storptr(v, n)
// #define wa_stor_LRESULT(v, n)      hb_stornl(v, n)
// #define wa_stor_MCIDEVICEID(v, n)  hb_storni(v, n)
// #define wa_stor_MCIERROR(v, n)     hb_stornl(v, n)
// #define wa_stor_MMRESULT(v, n)     hb_storni(v, n)
// #define wa_stor_SIZE_T(v, n)       hb_stornl(v, n)
#define wa_stor_UCHAR(v, n)        hb_storni(v, n)
#define wa_stor_UINT(v, n)         hb_storni(v, n)
// #define wa_stor_UINT_PTR(v, n)     hb_storni(v, n)
#define wa_stor_UINT16(v, n)       hb_storni(v, n)
// #define wa_stor_UINT32(v, n)       hb_storni(v, n)
#define wa_stor_ULONG(v, n)        hb_stornl(v, n)
// #define wa_stor_ULONG_PTR(v, n)    hb_stornl(v, n)
// #define wa_stor_WCHAR(v, n)        hb_storni(v, n)
#define wa_stor_WORD(v, n)         hb_storni(v, n)
// #define wa_stor_WPARAM(v, n)       hb_storni(v, n)
#define wa_stor_REAL(v, n)         hb_stornd(v, n)

// structures

#define wa_par_ABC(n)                             static_cast<ABC *>(wa_get_ptr(n))
#define wa_par_ABCFLOAT(n)                        static_cast<ABCFLOAT *>(wa_get_ptr(n))
#define wa_par_ACCEL(n)                           static_cast<ACCEL *>(wa_get_ptr(n))
#define wa_par_BITMAP(n)                          static_cast<BITMAP *>(wa_get_ptr(n))
#define wa_par_BITMAPINFO(n)                      static_cast<BITMAPINFO *>(wa_get_ptr(n))
#define wa_par_BLENDFUNCTION(n)                   static_cast<BLENDFUNCTION *>(wa_get_ptr(n))
#define wa_par_COLORADJUSTMENT(n)                 static_cast<COLORADJUSTMENT *>(wa_get_ptr(n))
#define wa_par_COLORMAP(n)                        static_cast<COLORMAP *>(wa_get_ptr(n))
#define wa_par_COMBOBOXINFO(n)                    static_cast<COMBOBOXINFO *>(wa_get_ptr(n))
#define wa_par_COMSTAT(n)                         static_cast<COMSTAT *>(wa_get_ptr(n))
#define wa_par_DCB(n)                             static_cast<DCB *>(wa_get_ptr(n))
#define wa_par_DRAWTEXTPARAMS(n)                  static_cast<DRAWTEXTPARAMS *>(wa_get_ptr(n))
#define wa_par_FILETIME(n)                        static_cast<FILETIME *>(wa_get_ptr(n))
#define wa_par_FLASHWINFO(n)                      static_cast<FLASHWINFO *>(wa_get_ptr(n))
#define wa_par_ICONINFO(n)                        static_cast<ICONINFO *>(wa_get_ptr(n))
#define wa_par_IMAGEINFO(n)                       static_cast<IMAGEINFO *>(wa_get_ptr(n))
#define wa_par_IMAGELISTDRAWPARAMS(n)             static_cast<IMAGELISTDRAWPARAMS *>(wa_get_ptr(n))
#define wa_par_INITCOMMONCONTROLSEX(n)            static_cast<INITCOMMONCONTROLSEX *>(wa_get_ptr(n))
#define wa_par_KERNINGPAIR(n)                     static_cast<KERNINGPAIR *>(wa_get_ptr(n))
#define wa_par_LOGBRUSH(n)                        static_cast<LOGBRUSH *>(wa_get_ptr(n))
#define wa_par_LOGPALETTE(n)                      static_cast<LOGPALETTE *>(wa_get_ptr(n))
#define wa_par_LOGPEN(n)                          static_cast<LOGPEN *>(wa_get_ptr(n))
#define wa_par_MEMORYSTATUSEX(n)                  static_cast<MEMORYSTATUSEX *>(wa_get_ptr(n))
#define wa_par_MENUINFO(n)                        static_cast<MENUINFO *>(wa_get_ptr(n))
#define wa_par_MONITORINFO(n)                     static_cast<MONITORINFO *>(wa_get_ptr(n))
#define wa_par_MOUSEMOVEPOINT(n)                  static_cast<MOUSEMOVEPOINT *>(wa_get_ptr(n))
#define wa_par_MSG(n)                             static_cast<MSG *>(wa_get_ptr(n))
#define wa_par_PAINTSTRUCT(n)                     static_cast<PAINTSTRUCT *>(wa_get_ptr(n))
#define wa_par_PIXELFORMATDESCRIPTOR(n)           static_cast<PIXELFORMATDESCRIPTOR *>(wa_get_ptr(n))
#define wa_par_POINT(n)                           static_cast<POINT *>(wa_get_ptr(n))
#define wa_par_RECT(n)                            static_cast<RECT *>(wa_get_ptr(n))
#define wa_par_SCROLLINFO(n)                      static_cast<SCROLLINFO *>(wa_get_ptr(n))
#define wa_par_SIZE(n)                            static_cast<SIZE *>(wa_get_ptr(n))
#define wa_par_SYSTEM_INFO(n)                     static_cast<SYSTEM_INFO *>(wa_get_ptr(n))
#define wa_par_SYSTEMTIME(n)                      static_cast<SYSTEMTIME *>(wa_get_ptr(n))
#define wa_par_TRACKMOUSEEVENT(n)                 static_cast<TRACKMOUSEEVENT *>(wa_get_ptr(n))
#define wa_par_UPDATELAYEREDWINDOWINFO(n)         static_cast<UPDATELAYEREDWINDOWINFO *>(wa_get_ptr(n))
#define wa_par_WINDOWINFO(n)                      static_cast<WINDOWINFO *>(wa_get_ptr(n))
#define wa_par_WINDOWPLACEMENT(n)                 static_cast<WINDOWPLACEMENT *>(wa_get_ptr(n))
#define wa_par_WINDOWPOS(n)                       static_cast<WINDOWPOS *>(wa_get_ptr(n))
#define wa_par_WNDCLASS(n)                        static_cast<WNDCLASS *>(wa_get_ptr(n))
#define wa_par_WNDCLASSEX(n)                      static_cast<WNDCLASSEX *>(wa_get_ptr(n))
#define wa_par_XFORM(n)                           static_cast<XFORM *>(wa_get_ptr(n))
#define wa_par_METAFILEPICT(n)                    static_cast<METAFILEPICT *>(wa_get_ptr(n))
#define wa_par_TITLEBARINFO(n)                    static_cast<TITLEBARINFO *>(wa_get_ptr(n))
#define wa_par_CURSORINFO(n)                      static_cast<CURSORINFO *>(wa_get_ptr(n))
#define wa_par_MENUBARINFO(n)                     static_cast<MENUBARINFO *>(wa_get_ptr(n))
#define wa_par_SCROLLBARINFO(n)                   static_cast<SCROLLBARINFO *>(wa_get_ptr(n))

// auxiliary macros
#define wa_vmPushHWND(hwnd)     hb_vmPushPointer(hwnd)
#define wa_vmPushUINT(uMsg)     hb_vmPushInteger(uMsg)
#define wa_vmPushWPARAM(wParam) hb_vmPushNumInt(wParam)
#define wa_vmPushLPARAM(lParam) hb_vmPushNumInt(lParam)

// OpenGL

// typedef unsigned int GLenum;
#define wa_par_GLenum(n) static_cast<GLenum>(hb_parni(n))
#define wa_ret_GLenum(x) hb_retni(x)

// typedef unsigned char GLboolean;
#define wa_par_GLboolean(n) static_cast<GLboolean>(hb_parni(n))
#define wa_ret_GLboolean(x) hb_retni(x)

// typedef unsigned int GLbitfield;
#define wa_par_GLbitfield(n) static_cast<GLbitfield>(hb_parni(n))
#define wa_ret_GLbitfield(x) hb_retni(x)

// typedef signed char GLbyte;
#define wa_par_GLbyte(n) static_cast<GLbyte>(hb_parni(n))
#define wa_ret_GLbyte(x) hb_retni(x)

// typedef short GLshort;
#define wa_par_GLshort(n) static_cast<GLshort>(hb_parni(n))
#define wa_ret_GLshort(x) hb_retni(x)

// typedef int GLint;
#define wa_par_GLint(n) static_cast<GLint>(hb_parni(n))
#define wa_ret_GLint(x) hb_retni(x)

// typedef int GLsizei;
#define wa_par_GLsizei(n) static_cast<GLsizei>(hb_parni(n))
#define wa_ret_GLsizei(x) hb_retni(x)

// typedef unsigned char GLubyte;
#define wa_par_GLubyte(n) static_cast<GLubyte>(hb_parni(n))
#define wa_ret_GLubyte(x) hb_retni(x)

// typedef unsigned short GLushort;
#define wa_par_GLushort(n) static_cast<GLushort>(hb_parni(n))
#define wa_ret_GLushort(x) hb_retni(x)

// typedef unsigned int GLuint;
#define wa_par_GLuint(n) static_cast<GLuint>(hb_parni(n))
#define wa_ret_GLuint(x) hb_retni(x)

// typedef float GLfloat;
#define wa_par_GLfloat(n) static_cast<GLfloat>(hb_parnd(n))
#define wa_ret_GLfloat(x) hb_retnd(x)

// typedef float GLclampf;
#define wa_par_GLclampf(n) static_cast<GLclampf>(hb_parnd(n))
#define wa_ret_GLclampf(x) hb_retnd(x)

// typedef double GLdouble;
#define wa_par_GLdouble(n) static_cast<GLdouble>(hb_parnd(n))
#define wa_ret_GLdouble(x) hb_retnd(x)

// typedef double GLclampd;
#define wa_par_GLclampd(n) static_cast<GLclampd>(hb_parnd(n))
#define wa_ret_GLclampd(x) hb_retnd(x)

// typedef void GLvoid;
